" -------------------------------
" Rubyプログラミングが快適になるVim環境を0から構築する - Qiita
" http://qiita.com/mogulla3/items/42a7f6c73fa4a90b1df3
" -------------------------------

""""""""""""""""""""""""""""""
" 脱初心者を目指すVimmerにオススメしたいVimプラグインや.vimrcの設定 - Qiita
" http://qiita.com/jnchito/items/5141b3b01bced9f7f48f
" dotfiles/.vimrc · JunichiIto/dotfiles
" https://github.com/JunichiIto/dotfiles/blob/master/.vimrc
""""""""""""""""""""""""""""""

" -------------------------------
" NeoBundle
" -------------------------------
""""""""""""""""""""""""""""""
" プラグインのセットアップ
""""""""""""""""""""""""""""""
if has('vim_starting')
  set nocompatible               " Be iMproved

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'
""""""""""""""""""""""""""""""

" コード補完
NeoBundle 'Shougo/neocomplete.vim'
" http://nigorojr.com/articles/19
"NeoBundle 'marcus/rsense'
NeoBundle 'NigoroJr/rsense'
" NeoBundle 'supermomonga/neocomplete-rsense.vim'

" 静的解析
NeoBundle 'scrooloose/syntastic'

" ドキュメント参照
NeoBundle 'thinca/vim-ref'
NeoBundle 'yuku-t/vim-ref-ri'

" メソッド定義元へのジャンプ
NeoBundle 'szw/vim-tags'

" 自動で閉じる
NeoBundle 'tpope/vim-endwise'


""""""""""""""""""""""""""""""
" 脱初心者を目指すVimmerにオススメしたいVimプラグインや.vimrcの設定 - Qiita
" http://qiita.com/jnchito/items/5141b3b01bced9f7f48f
""""""""""""""""""""""""""""""
" Unite and create user interfaces
NeoBundle 'Shougo/unite.vim'

" MRU plugin includes unite.vim MRU sources
NeoBundle 'Shougo/neomru.vim'

" A tree explorer plugin for vim
NeoBundle 'scrooloose/nerdtree'

" A Git wrapper so awesome, it should be illegal
NeoBundle 'tpope/vim-fugitive'

" Ruby on Rails: easy file navigation, enhanced syntax highlighting, and more
NeoBundle 'tpope/vim-rails'

" An extensible & universal comment plugin that also handles embedded filetypes
NeoBundle 'tomtom/tcomment_vim'

" Delete/change/add parentheses/quotes/XML-tags/much more with ease
NeoBundle 'tpope/vim-surround'

" A Vim plugin for visually displaying indent levels in code
NeoBundle 'nathanaelkane/vim-indent-guides'

" ansi escape sequences concealed, but highlighted as specified (conceal)
NeoBundle 'vim-scripts/AnsiEsc.vim'

" Highlights trailing whitespace in red and provides :FixWhitespace to fix it
NeoBundle 'bronson/vim-trailing-whitespace'
""""""""""""""""""""""""""""""


""" My NeoBundle

" Interactive command execution in Vim
NeoBundle 'Shougo/vimproc', {
  \ 'build' : {
  \     'windows' : 'make -f make_mingw32.mak',
  \     'cygwin' : 'make -f make_cygwin.mak',
  \     'mac' : 'make -f make_mac.mak',
  \     'unix' : 'make -f make_unix.mak',
  \    },
  \ }

" Powerful shell implemented by vim
NeoBundle 'Shougo/vimshell'

" a unite.vim plugin for rails
NeoBundle 'basyura/unite-rails'

" Solarized
NeoBundle 'altercation/vim-colors-solarized'

" Handles bracketed-paste-mode in vim (aka. automatic `:set paste`)
NeoBundle 'ConradIrwin/vim-bracketed-paste'

" Add additional support for Ansible in Vim
NeoBundle 'chase/vim-ansible-yaml'

" submode : Create your own submodes
NeoBundle 'kana/vim-submode'

""""""""""""""""""""""""""""""
" Puyopuyo
""""""""""""""""""""""""""""""
" This is Game Engine for Vim script
NeoBundle 'rbtnn/game_engine.vim'

" Puyo on Vim
NeoBundle 'rbtnn/puyo.vim'
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" PHP settings
""""""""""""""""""""""""""""""
" VimでPHP開発環境を作成 - Qiita
" http://qiita.com/NanohaAsOnKai/items/0188fb3b60e8a79656a0
""""""""""""""""""""""""""""""

"Integrated reference viewer.
"NeoBundleLazy 'thinca/vim-ref', {'functions': 'ref#K'}

" UltiSnips - The ultimate snippet solution for Vim.
"NeoBundle 'SirVer/ultisnips'

" vim-snipmate default snippets (Previously snipmate-snippets)
"NeoBundle 'honza/vim-snippets'

" The neocomplete source for PHP
NeoBundle 'violetyk/neocomplete-php.vim'

" neo-snippet plugin contains neocomplcache snippets source
NeoBundle 'Shougo/neosnippet'

" The standard snippets repository for neosnippet
NeoBundle 'Shougo/neosnippet-snippets'

" smarty syntax
NeoBundle 'vim-scripts/smarty-syntax'

" Source code browser (supports C/C++, java, perl, python, tcl, sql, php, etc)
NeoBundleLazy 'vim-scripts/taglist.vim', {'commands': 'Tlist'}

" Async syntax checking.
"NeoBundleLazy 'osyo-manga/vim-watchdogs', {'depends': 'osyo-manga/shabadou.vim', 'insert': 1}

" Use fabpot/PHP-CS-Fixer
"NeoBundleLazy 'stephpy/vim-php-cs-fixer', {'functions': 'PhpCsFixerFixFile'}

" Multi-language DBGP debugger client for Vim
NeoBundle 'joonty/vdebug'

""""""""""""""""""""""""""""""
" VimでJavaScript開発環境を作成 - Qiita
" http://qiita.com/NanohaAsOnKai/items/21054883b57f895875c0
""""""""""""""""""""""""""""""

" Vastly improved Javascript indentation and syntax support in Vim.
NeoBundleLazy 'pangloss/vim-javascript', {'filetypes': ['html', 'tpl', 'php', 'javascript']}

" This is a documentation viewer for MDN.
NeoBundleFetch 'tokuhirom/jsref'

" jQAPI - Alternative jQuery Documentation Browser
NeoBundleFetch 'mustardamus/jqapi'


""""""""""""""""""""""""""""""
call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck
""""""""""""""""""""""""""""""


" -------------------------------
" Rsense
" -------------------------------
if has('unix')
  let g:rsenseHome = '/usr/local/lib/rsense-0.3'
endif
if has('mac')
  let g:rsenseHome = '/usr/local/opt/rsense/libexec/'
endif

let g:rsenseUseOmniFunc = 1

" --------------------------------
" neocomplete.vim
" --------------------------------
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
if !exists('g:neocomplete#force_omni_input_patterns')
  let g:neocomplete#force_omni_input_patterns = {}
endif
let g:neocomplete#force_omni_input_patterns.ruby = '[^.*\t]\.\w*\|\h\w*::'

" --------------------------------
" rubocop
" --------------------------------
" syntastic_mode_mapをactiveにするとバッファ保存時にsyntasticが走る
" active_filetypesに、保存時にsyntasticを走らせるファイルタイプを指定する
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': ['ruby'] }
let g:syntastic_ruby_checkers = ['rubocop']


""""""""""""""""""""""""""""""
" vimを立ち上げたときに、自動的にvim-indent-guidesをオンにする
let g:indent_guides_enable_on_vim_startup = 1


""""""""""""""""""""""""""""""
" Unite.vim settings
""""""""""""""""""""""""""""""
" unite.vim まとめ - Qiita
" http://qiita.com/hide/items/77b9c1b0f29577d60397
""""""""""""""""""""""""""""""
let g:unite_enable_start_insert=1
let g:unite_source_history_yank_enable =1
let g:unite_source_file_mru_limit = 200
nnoremap <silent> ,uy :<C-u>Unite history/yank<CR>
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> ,uu :<C-u>Unite file_mru buffer<CR>
" ESCキーを2回押すと終了する
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" NERDTree settings
""""""""""""""""""""""""""""""
nnoremap <silent> ,nt :NERDTreeToggle<CR>
nnoremap :tree :NERDTreeToggle
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" PHP settings
""""""""""""""""""""""""""""""
" VimでPHP開発環境を作成 - Qiita
" http://qiita.com/NanohaAsOnKai/items/0188fb3b60e8a79656a0
""""""""""""""""""""""""""""""

" --------------------------------
" vim-ref
" --------------------------------
let g:ref_no_default_key_mappings = 1
inoremap <silent><C-k> <C-o>:call<Space>ref#K('normal')<CR><ESC>
nnoremap <silent>K     :<C-u>call<Space>ref#K('normal')<CR>
let s:hooks = neobundle#get_hooks('vim-ref')
"function! s:hooks.on_source(bundle) abort "{{{
"    let g:ref_cache_dir      = $HOME .'/.vim/vim-ref/cache'
"    let g:ref_phpmanual_path = $HOME .'/.vim/vim-ref/php-chunked-xhtml'
"endfunction
let g:ref_cache_dir      = $HOME .'/.vim/vim-ref/cache'
let g:ref_phpmanual_path = $HOME .'/.vim/vim-ref/php-chunked-xhtml'
nnoremap :rp :Ref<Space>phpmanual<Space>
let g:ref_detect_filetype = {
      \    'html':       ['javascript', 'jquery'],
      \    'javascript': ['javascript', 'jquery']}
let g:ref_javascript_doc_path = $HOME .'/.vim/bundle/jsref/htdocs'
let g:ref_jquery_doc_path     = $HOME .'/.vim/bundle/jqapi'
let g:ref_use_cache           = 1
let g:ref_use_vimproc         = 1


" --------------------------------
" UltiSnips
" --------------------------------
"let g:did_UltiSnips_snipmate_compatibility = 1
"let g:UltiSnipsEditSplit                   = 'vertical'
"let g:UltiSnipsExpandTrigger               = '<TAB>'
"let g:UltiSnipsJumpBackwardTrigger         = '<S-TAB>'
"let g:UltiSnipsJumpForwardTrigger          = '<TAB>'
"let g:UltiSnipsSnippetsDir                 = $HOME .'/.vim/bundle/vim-snippets/UltiSnips'
"let g:UltiSnipsUsePythonVersion            = 2

" --------------------------------
" neosnippet.vim
" --------------------------------
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

let g:neosnippet#snippets_directory='~/.vim/bundle/neosnippet-snippets/snippets'


" --------------------------------
" neocomplete.vim for PHP
" --------------------------------
"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
      \ 'default' : '',
      \ 'vimshell' : $HOME.'/.vimshell_hist',
      \ 'scheme' : $HOME.'/.gosh_completions'
      \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

" For cursor moving in insert mode(Not recommended)
"inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
"inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
"inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
"inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
" Or set this.
"let g:neocomplete#enable_cursor_hold_i = 1
" Or set this.
"let g:neocomplete#enable_insert_char_pre = 1

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
"let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

" --------------------------------
" neocomplete-php.vim
" --------------------------------
let g:neocomplete_php_locale = 'ja'

" --------------------------------
" taglist.vim
" --------------------------------
nnoremap <Leader>t :<C-u>Tlist<CR>
let s:hooks = neobundle#get_hooks('taglist.vim')
function! s:hooks.on_source(bundle) abort "{{{
    let g:tlist_php_settings     = 'php;c:class;f:function;d:constant'
    let g:Tlist_Exit_OnlyWindow  = 1
    let g:Tlist_Show_One_File    = 1
    let g:Tlist_Use_Right_Window = 1
    let g:Tlist_WinWidth         = 25
endfunction "}}}
"}}}

" autocmd MyAutoCmd BufNewFile,BufRead $HOME/sample1/*.php setlocal tags=$HOME/.vim/tags/sample1.tags
" autocmd MyAutoCmd BufNewFile,BufRead $HOME/sample2/*.php setlocal tags=$HOME/.vim/tags/sample2.tags

" --------------------------------
" vimproc
" --------------------------------


" --------------------------------
" vim-watchdogs
" --------------------------------
let s:hooks = neobundle#get_hooks('vim-watchdogs')
function! s:hooks.on_source(bundle) abort "{{{
    "vim-watchdogs
    let g:watchdogs_check_BufWritePost_enable  = 1
    let g:watchdogs_check_CursorHold_enable    = 1
endfunction "}}}

" --------------------------------
" Vim-php-cs-fixer
" --------------------------------
nnoremap <Leader>php :<C-u>call<Space>PhpCsFixerFixFile()<CR>
let s:hooks = neobundle#get_hooks('vim-php-cs-fixer')
function! s:hooks.on_source(bundle) abort "{{{
    let g:php_cs_fixer_path = "$HOME/.vim/phpCsFixer/php-cs-fixer" " define the path to the php-cs-fixer.phar
    let g:php_cs_fixer_config                 = 'default'
    let g:php_cs_fixer_dry_run                = 0
    let g:php_cs_fixer_enable_default_mapping = 0
    let g:php_cs_fixer_fixers_list            = 'align_equals,align_double_arrow'
    let g:php_cs_fixer_level                  = 'all'
    let g:php_cs_fixer_php_path               = 'php'
    let g:php_cs_fixer_verbose                = 0
endfunction

" --------------------------------
" Vdebug
" --------------------------------
let g:vdebug_force_ascii = 1
let g:vdebug_features = {'max_children': 128}

""""""""""""""""""""""""""""""
" NeoBundle
""""""""""""""""""""""""""""""
if has('vim_starting')
    " 初回起動時のみruntimepathにNeoBundleのパスを指定する
    set runtimepath+=~/.vim/bundle/neobundle.vim/

    " NeoBundleが未インストールであればgit cloneする
    if !isdirectory(expand("~/.vim/bundle/neobundle.vim/"))
        echo "install NeoBundle..."
        :call system("git clone git://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim")
    endif
endif

call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'
""""""""""""""""""""""""""""""
" ドキュメント参照
NeoBundle 'thinca/vim-ref'
NeoBundle 'yuku-t/vim-ref-ri'

" An extensible & universal comment plugin that also handles embedded filetypes
NeoBundle 'tomtom/tcomment_vim'

" Delete/change/add parentheses/quotes/XML-tags/much more with ease
NeoBundle 'tpope/vim-surround'

" ansi escape sequences concealed, but highlighted as specified (conceal)
NeoBundle 'vim-scripts/AnsiEsc.vim'
""""""""""""""""""""""""""""""

""" My NeoBundle

" Interactive command execution in Vim
NeoBundle 'Shougo/vimproc', {
  \ 'build' : {
  \     'windows' : 'make -f make_mingw32.mak',
  \     'cygwin' : 'make -f make_cygwin.mak',
  \     'mac' : 'make -f make_mac.mak',
  \     'unix' : 'make -f make_unix.mak',
  \    },
  \ }

" Powerful shell implemented by vim
NeoBundle 'Shougo/vimshell'

" Handles bracketed-paste-mode in vim (aka. automatic `:set paste`)
NeoBundle 'ConradIrwin/vim-bracketed-paste'

" submode : Create your own submodes
NeoBundle 'kana/vim-submode'
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" basic
""""""""""""""""""""""""""""""
" precision colorscheme for the vim text editor
NeoBundle 'altercation/vim-colors-solarized'

" A light and configurable statusline/tabline for Vim
NeoBundle 'itchyny/lightline.vim'

" Vim search status.
NeoBundle 'osyo-manga/vim-anzu'

" Next generation completion framework after neocomplcache
NeoBundle 'Shougo/neocomplete.vim'

" Syntax checking hacks for vim
NeoBundle 'scrooloose/syntastic'

" Unite and create user interfaces
NeoBundle 'Shougo/unite.vim'

" MRU plugin includes unite.vim MRU sources
NeoBundle 'Shougo/neomru.vim'

" A tree explorer plugin for vim
NeoBundle 'scrooloose/nerdtree'

" Source code browser (supports C/C++, java, perl, python, tcl, sql, php, etc)
NeoBundle 'vim-scripts/taglist.vim'

" This plugin for Vim enable an auto-close chars feature for you.
NeoBundle 'Townk/vim-autoclose'

" Start a * or # search from a visual block
NeoBundle 'nelstrom/vim-visual-star-search'

" Vim plugin that allows you to visually select increasingly larger regions of text using the same key combination.
NeoBundle 'terryma/vim-expand-region'

" A Vim plugin for visually displaying indent levels in code
NeoBundle 'nathanaelkane/vim-indent-guides'

" Highlights trailing whitespace in red and provides :FixWhitespace to fix it
NeoBundle 'bronson/vim-trailing-whitespace'

" An efficient alternative to the standard matchparen plugin
NeoBundle 'itchyny/vim-parenmatch'

" Underlines the word under the cursor
NeoBundle 'itchyny/vim-cursorword'

" Override vim syntax for yaml files
NeoBundle 'stephpy/vim-yaml'

" Add additional support for Ansible in Vim
" NeoBundle 'chase/vim-ansible-yaml'

" A simple Vim plugin to switch segments of text with predefined replacements
NeoBundle 'AndrewRadev/switch.vim'
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" Git
""""""""""""""""""""""""""""""
" A Git wrapper so awesome, it should be illegal
NeoBundle 'tpope/vim-fugitive'

" A Vim plugin which shows a git diff in the gutter (sign column) and stages/undoes hunks.
NeoBundle 'airblade/vim-gitgutter'
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" Ruby
""""""""""""""""""""""""""""""
" Ruby code completion.
NeoBundle 'osyo-manga/vim-monster'

" Highlight Ruby local variables
NeoBundle 'todesking/ruby_hl_lvar.vim'

" Ruby on Rails: easy file navigation, enhanced syntax highlighting, and more
NeoBundle 'tpope/vim-rails'

" a unite.vim plugin for rails
NeoBundle 'basyura/unite-rails'

" wisely add "end" in ruby, endfunction/endif/more in vim script, etc
NeoBundle 'tpope/vim-endwise'
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" HTML
""""""""""""""""""""""""""""""
" HTML5 omnicomplete and syntax
NeoBundle 'othree/html5.vim'

" Syntax highlighting for VIM
NeoBundle 'slim-template/vim-slim'
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" CSS
""""""""""""""""""""""""""""""
" CSS3 syntax (and syntax defined in some foreign specifications) support for Vim's built-in syntax/css.vim
NeoBundle 'hail2u/vim-css3-syntax'
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" JavaScript
""""""""""""""""""""""""""""""
" Vastly improved Javascript indentation and syntax support in Vim.
NeoBundleLazy 'pangloss/vim-javascript', {'filetypes': ['html', 'tpl', 'php', 'javascript']}

" A better JSON for Vim: distinct highlighting of keywords vs values, JSON-specific (non-JS) warnings, quote concealing. Pathogen-friendly.
NeoBundle 'elzr/vim-json'

" Syntax for JavaScript libraries
NeoBundle 'othree/javascript-libraries-syntax.vim'

" CoffeeScript support for vim
NeoBundle 'kchmck/vim-coffee-script'

" AngularJS with Vim
NeoBundle 'burnettk/vim-angular'
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" Application
""""""""""""""""""""""""""""""
" A calendar application for Vim
" NeoBundle 'itchyny/calendar.vim'

" This is Game Engine for Vim script
" NeoBundle 'rbtnn/game_engine.vim'

" Puyo on Vim
" NeoBundle 'rbtnn/puyo.vim'
""""""""""""""""""""""""""""""

"Integrated reference viewer.
"NeoBundleLazy 'thinca/vim-ref', {'functions': 'ref#K'}

" vim-snipmate default snippets (Previously snipmate-snippets)
"NeoBundle 'honza/vim-snippets'

" neo-snippet plugin contains neocomplcache snippets source
NeoBundle 'Shougo/neosnippet'

" The standard snippets repository for neosnippet
NeoBundle 'Shougo/neosnippet-snippets'

" This Vim plugin is plugin supporting watchdogs.
NeoBundle 'KazuakiM/vim-qfstatusline'

" Run commands quickly.
NeoBundleLazy 'thinca/vim-quickrun', {'commands': 'QuickRun'}

" Async syntax checking.
" NeoBundleLazy 'osyo-manga/vim-watchdogs', {'depends': 'osyo-manga/shabadou.vim', 'insert': 1}
""""""""""""""""""""""""""""""
" This is a documentation viewer for MDN.
NeoBundleFetch 'tokuhirom/jsref'

" jQAPI - Alternative jQuery Documentation Browser
NeoBundleFetch 'mustardamus/jqapi'
""""""""""""""""""""""""""""""
call neobundle#end()

" ファイルタイプ別のVimプラグイン/インデントを有効にする
filetype plugin indent on

" 未インストールのVimプラグインがある場合、インストールするかどうかを尋ねてくれるようにする設定
NeoBundleCheck
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" lightline.vim
""""""""""""""""""""""""""""""
" tabline
set showtabline=2 " タブラインを常に表示
" statusline
set laststatus=2 " ステータスラインを常に表示
set showmode " 現在のモードを表示
set showcmd " 打ったコマンドをステータスラインの下に表示
set ruler " ステータスラインの右側にカーソルの現在位置を表示する

" vim-gitgutter
let g:gitgutter_sign_added = '✚'
let g:gitgutter_sign_modified = '➜'
let g:gitgutter_sign_removed = '✘'

" lightline.vim
let g:lightline = {
        \ 'colorscheme': 'solarized',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [
        \     ['mode', 'paste'],
        \     ['fugitive', 'gitgutter', 'filename'],
        \     ['anzu']
        \   ],
        \   'right': [
        \     ['lineinfo', 'syntastic'],
        \     ['percent'],
        \     ['charcode', 'fileformat', 'fileencoding', 'filetype'],
        \   ]
        \ },
        \ 'component_function': {
        \   'modified': 'MyModified',
        \   'readonly': 'MyReadonly',
        \   'fugitive': 'MyFugitive',
        \   'filename': 'MyFilename',
        \   'fileformat': 'MyFileformat',
        \   'filetype': 'MyFiletype',
        \   'fileencoding': 'MyFileencoding',
        \   'mode': 'MyMode',
        \   'syntastic': 'SyntasticStatuslineFlag',
        \   'charcode': 'MyCharCode',
        \   'gitgutter': 'MyGitGutter',
        \   'anzu': 'anzu#search_status'
        \ },
        \ }

function! MyModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &ro ? '⭤' : ''
endfunction

function! MyFilename()
  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
        \ '' != expand('%:t') ? expand('%') : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      let _ = fugitive#head()
      return strlen(_) ? '⭠ '._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! MyFileformat()
  return winwidth('.') > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth('.') > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  return winwidth('.') > 60 ? lightline#mode() : ''
endfunction

function! MyGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
        \ || ! get(g:, 'gitgutter_enabled', 0)
        \ || winwidth('.') <= 90
    return ''
  endif
  let symbols = [
        \ g:gitgutter_sign_added . ' ',
        \ g:gitgutter_sign_modified . ' ',
        \ g:gitgutter_sign_removed . ' '
        \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []
  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor
  return join(ret, ' ')
endfunction

" https://github.com/Lokaltog/vim-powerline/blob/develop/autoload/Powerline/Functions.vim
function! MyCharCode()
  if winwidth('.') <= 70
    return ''
  endif

  " Get the output of :ascii
  redir => ascii
  silent! ascii
  redir END

  if match(ascii, 'NUL') != -1
    return 'NUL'
  endif

  " Zero pad hex values
  let nrformat = '0x%02x'

  let encoding = (&fenc == '' ? &enc : &fenc)

  if encoding == 'utf-8'
    " Zero pad with 4 zeroes in unicode files
    let nrformat = '0x%04x'
  endif

  " Get the character and the numeric value from the return value of :ascii
  " This matches the two first pieces of the return value, e.g.
  " "<F>  70" => char: 'F', nr: '70'
  let [str, char, nr; rest] = matchlist(ascii, '\v\<(.{-1,})\>\s*([0-9]+)')

  " Format the numeric value
  let nr = printf(nrformat, nr)

  return "'". char ."' ". nr
endfunction
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" vim-anzu
""""""""""""""""""""""""""""""
nmap n <Plug>(anzu-n)
nmap N <Plug>(anzu-N)
nmap * <Plug>(anzu-star)
nmap # <Plug>(anzu-sharp)
augroup vim-anzu
" 一定時間キー入力がないとき、ウインドウを移動したとき、タブを移動したときに
" 検索ヒット数の表示を消去する
    autocmd!
    autocmd CursorHold,CursorHoldI,WinLeave,TabLeave * call anzu#clear_search_status()
augroup END
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" neocomplete.vim
""""""""""""""""""""""""""""""
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
" if !exists('g:neocomplete#force_omni_input_patterns')
"   let g:neocomplete#force_omni_input_patterns = {}
" endif
" let g:neocomplete#force_omni_input_patterns.ruby = '[^.*\t]\.\w*\|\h\w*::'
" Use neocomplete.vim
let g:neocomplete#sources#omni#input_patterns = {
\   "ruby" : '[^. *\t]\.\w*\|\h\w*::',
\}
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" Syntastic
""""""""""""""""""""""""""""""
" syntastic_mode_mapをactiveにするとバッファ保存時にsyntasticが走る
" active_filetypesに、保存時にsyntasticを走らせるファイルタイプを指定する
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': ['ruby'] }
let g:syntastic_ruby_checkers = ['rubocop']
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" Unite.vim
""""""""""""""""""""""""""""""
" unite.vim まとめ - Qiita
" http://qiita.com/hide/items/77b9c1b0f29577d60397
""""""""""""""""""""""""""""""
let g:unite_enable_start_insert=1
let g:unite_source_history_yank_enable =1
let g:unite_source_file_mru_limit = 200
" matcher をデフォルトにする
call unite#custom#source('file', 'matchers', "matcher_default")
nnoremap <silent> ,uy :<C-u>Unite history/yank<CR>
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> ,uu :<C-u>Unite file_mru buffer<CR>
" ESCキーを2回押すと終了する
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" NERDTree
""""""""""""""""""""""""""""""
nnoremap <silent> ,nt :NERDTreeToggle<CR>
nnoremap :tree :NERDTreeToggle
" 不可視フェイルを表示する
let NERDTreeShowHidden = 1
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" vim-indent-guides
""""""""""""""""""""""""""""""
" vimを立ち上げたときに、自動的にvim-indent-guidesをオンにする
let g:indent_guides_enable_on_vim_startup = 1
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" vim-indent-guides
""""""""""""""""""""""""""""""
" 標準のmatchparenを使うのをやめる設定
let g:loaded_matchparen = 1
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" vim-expand-region
""""""""""""""""""""""""""""""
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" taglist.vim
""""""""""""""""""""""""""""""
" nnoremap <Leader>t :<C-u>Tlist<CR>
let g:tlist_javascript_settings = 'js;o:object;f:function'
let g:tlist_php_settings        = 'php;n:namespace;c:class;i:interface;t:trait;f:function;d:constant;v:variable'
let g:Tlist_Exit_OnlyWindow     = 1
let g:Tlist_Show_One_File       = 1
let g:Tlist_Use_Right_Window    = 1
let g:Tlist_WinWidth            = 25
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" calendar.vim
""""""""""""""""""""""""""""""
let g:calendar_google_calendar = 1
let g:calendar_google_task = 1
""""""""""""""""""""""""""""""

" --------------------------------
" vim-ref
" --------------------------------
let g:ref_no_default_key_mappings = 1
inoremap <silent><C-k> <C-o>:call<Space>ref#K('normal')<CR><ESC>
nnoremap <silent>K     :<C-u>call<Space>ref#K('normal')<CR>
let s:hooks = neobundle#get_hooks('vim-ref')
"function! s:hooks.on_source(bundle) abort "{{{
"    let g:ref_cache_dir      = $HOME .'/.vim/vim-ref/cache'
"    let g:ref_phpmanual_path = $HOME .'/.vim/vim-ref/php-chunked-xhtml'
"endfunction
let g:ref_cache_dir      = $HOME .'/.vim/vim-ref/cache'
let g:ref_phpmanual_path = $HOME .'/.vim/vim-ref/php-chunked-xhtml'
nnoremap :rp :Ref<Space>phpmanual<Space>
let g:ref_detect_filetype = {
      \    'html':       ['javascript', 'jquery'],
      \    'javascript': ['javascript', 'jquery']}
let g:ref_javascript_doc_path = $HOME .'/.vim/bundle/jsref/htdocs'
let g:ref_jquery_doc_path     = $HOME .'/.vim/bundle/jqapi'
let g:ref_use_cache           = 1
let g:ref_use_vimproc         = 1

" --------------------------------
" neosnippet.vim
" --------------------------------
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB>
\ pumvisible() ? "\<C-n>" :
\ neosnippet#expandable_or_jumpable() ?
\    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

let g:neosnippet#snippets_directory='~/.vim/bundle/neosnippet-snippets/snippets'

""""""""""""""""""""""""""""""
" javascript-libraries-syntax.vim
""""""""""""""""""""""""""""""
 let g:used_javascript_libs = 'jquery,underscore,backbone,angularjs,angularui,angularuirouter,react'
""""""""""""""""""""""""""""""
